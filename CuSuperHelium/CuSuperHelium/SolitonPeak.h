#pragma once

#include <cmath>
#include <vector>
#include <numbers>

namespace PeriodicFunctions 
{
    const double PI = std::numbers::pi;
    double PeriodicSeries(double x, const double a0, const std::vector<double>& an, const std::vector<double>& bn) {
        // Map x into [-pi, pi) for evaluation
        /*double x_mod = fmod(x + PI, 2 * PI);
        if (x_mod < 0) x_mod += 2 * PI;
        x_mod -= PI;*/
        double x_mod = x;

        // Evaluate Fourier series
        double sum = a0;
        for (size_t n = 1; n < an.size()+1; n++) {
            double k = (n)*x_mod;
            sum += an[n-1] * cos(k) + bn[n-1] * sin(k);
        }
        return sum;
    }
}


namespace PeriodicFunctions::sech2 {

    // Constants
   
    const double L = 2*PI;  // Half-period

    // Fourier coefficients for s = 2.5, centered at pi, over [0, 2pi]
    const double a0 = 0.127324;
    const std::vector<double> an = {
        -0.238634, 0.198205, -0.149202, 0.104368, -0.069272,
         0.044287, -0.027554, 0.016798, -0.010081, 0.005976,
        -0.003507, 0.002041, -0.00118, 0.000678, -0.000387,
         0.00022, -0.000125, 0.000071, -0.00004, 0.000022
    };
    const std::vector<double> bn = {
        0.0, -0.0, 0.0, -0.0, 0.0,
        -0.0, 0.0, -0.0, 0.0, -0.0,
         0.0, -0.0, -0.0, -0.0, 0.0,
        -0.0, -0.0, -0.0, 0.0, -0.0
    };

    // Evaluates the 2pi-periodic Fourier approximation of 1/cosh2(2.5(x - pi))
    double sech2_periodic(double x) {
		return PeriodicFunctions::PeriodicSeries(x, a0, an, bn);
    }
}

namespace PeriodicFunctions::gaussian 
{
    const double a0 = 1.5957691216057246e-01;
    const std::vector<double> an = {
        -2.9461611224265999e-01, 2.3175324220918495e-01, -1.5534884398657164e-01, 8.8736667743563202e-02, -4.3192773210551573e-02, 1.7915624235873052e-02, -6.3323612663850467e-03, 1.9072705611707299e-03,
-4.8952154409208630e-04, 1.0706418061086808e-04, -1.9953977032952183e-05, 3.1690392718593555e-06, -4.2888282845949171e-07, 4.9460963193639726e-08, -4.8607073229860768e-09,  4.0705037970490321e-10, -2.9048571613839486e-11, 1.7657268970665185e-12,
-9.2567920916448894e-14, 3.4960563188109505e-15	};

    const std::vector<double> bn = { 2.6223499752091563e-17, -3.7755273619645299e-17, 8.1379620271750278e-17, -8.2679262975899290e-17, 3.5775787773059993e-16, 2.4757768672610516e-17, -2.8265739808891720e-17, -2.6120284222304456e-16, -3.1532838906412898e-18,
-7.2950269496059298e-16, 9.8101847751245039e-16, -3.6324921102983220e-16, -1.1792591716610814e-15, -4.4030064198317788e-16, 1.8338937189851727e-15, -2.4992000830124649e-16, -5.3663433720978846e-17, 8.2821191805862088e-17, 1.3592529500408239e-16, -1.5644912748822963e-15 };

    double gaussian_periodic(double x) {
        // Evaluate Fourier series
        return PeriodicFunctions::PeriodicSeries(x, a0, an, bn);
	}
}

namespace PeriodicFunctions::gaussianNarrow {
    const double a0 = 1.9947114020071637e-02;
    const std::vector<double> an = {
        -3.9844391409476411e-02, 3.9695254747701199e-02, -3.9447933090788916e-02, 3.9104269397545612e-02, -3.8666811680284935e-02, 3.8138781546052429e-02, -3.7524034691693797e-02, 3.6827014030332346e-02, -3.6052696246164799e-02, 3.5206532676429959e-02, -3.4294385501938411e-02, 3.3322460289179956e-02, -3.2297235966791460e-02, 3.1225393336676139e-02, -3.0113743215480444e-02, 2.8969155276148278e-02, -2.7798488613099640e-02, 2.6608524989875482e-02, -2.5405905646918941e-02, 2.4197072451914325e-02, -2.2988214068423295e-02, 2.1785217703255089e-02, -2.0593626871997499e-02, 1.9418605498321254e-02, -1.8264908538902187e-02, 1.7136859204780780e-02, -1.6038332734191980e-02, 1.4972746563574472e-02, -1.3943056644536092e-02, 1.2951759566589163e-02, -1.2000900069698563e-02, 1.1092083467945536e-02, -1.0226492456397736e-02, 9.4049077376886173e-03, -8.6277318826512798e-03, 7.8950158300893844e-03, -7.2064874336218096e-03, 6.5615814774677150e-03, -5.9594706068815170e-03, 5.3990966513187185e-03, -4.8792018579182179e-03, 4.3983595980426520e-03, -3.9550041589370994e-03, 3.5474592846231811e-03, -3.1739651835667490e-03, 2.8327037741600804e-03, -2.5218219915194070e-03, 2.2394530294841857e-03, -1.9837354391794150e-03, 1.7528300493568859e-03, -1.5449347134394976e-03, 1.3582969233684875e-03, -1.1912243607604799e-03, 1.0420934814423320e-03, -9.0935625015921740e-04, 7.9154515829812867e-04, -6.8727666906157330e-04, 5.9525324197782180e-04, -5.1426409230551854e-04, 4.4318484119401148e-04, -3.8097620982235539e-04, 3.2668190562013341e-04, -2.7942584148813734e-04, 2.3840882014680858e-04, -2.0290480573008506e-04, 1.7225689390550349e-04, -1.4587308046674333e-04, 1.2322191684747985e-04, -1.0382812956647176e-04, 8.7268269504777699e-05, -7.3166446283205497e-05, 6.1190193011556636e-05, -5.1046497434557302e-05, 4.2478027055278925e-05, -3.5259568236974695e-05, 2.9194692579322297e-05, -2.4112658022919389e-05, 1.9865547139410158e-05, -1.6325640876833207e-05, 1.3383022576793978e-05, -1.0943404344145194e-05, 8.9261657180392809e-06, -7.2625930304688989e-06, 5.8943067759636484e-06, -4.7718636544141352e-06, 3.8535196744705247e-06, -3.1041407059760829e-06, 2.4942471291733156e-06, -1.9991796710533930e-06, 1.5983741108230648e-06, -1.2747332382721340e-06, 1.0140852067236110e-06, -8.0471824575004313e-07, 6.3698251817880803e-07, -5.0295072925509687e-07, 3.9612990931217656e-07, -3.1121755816331519e-07, 2.4389607483363623e-07, -1.9066009065607702e-07, 1.4867195176992802e-07, -1.1564119058593058e-07, 8.9724351844239928e-08, -6.9442023760980539e-08, 5.3610353645045717e-08, -4.1284710054103782e-08, 3.1713492539020757e-08, -2.4300385796862100e-08, 1.8573618980121767e-08, -1.4161007391452482e-08, 1.0769760645425847e-08, -8.1701909278573844e-09, 6.1826208633119439e-09, -4.6668870775772290e-09, 3.5139551300102878e-09, -2.6392434868212811e-09, 1.9773198308669856e-09, -1.4777082690487466e-09, 1.1015763788181821e-09, -8.1913403478873324e-10, 6.0758849433494243e-10, -4.4955050759298084e-10, 3.3178860560901761e-10, -2.4426377084333543e-10, 1.7937862265708612e-10, -1.3140025590957652e-10, 9.6014604094588214e-11, -6.9982933089702523e-11, 5.0881834408702071e-11, -3.6901579752244689e-11, 2.6695841461634674e-11, -1.9264670027988439e-11, 1.3867044838650962e-11, -9.9571095225898751e-12, 7.1315379947520291e-12, -5.0951828385614817e-12, 3.6311632515937887e-12, -2.5815511482576837e-12, 1.8306259151766647e-12, -1.2949736750831528e-12, 9.1374582002531240e-13, -6.4330480156343986e-13, 4.5172352434136186e-13, -3.1659488399673255e-13, 2.2113227459844651e-13, -1.5408814215088990e-13, 1.0722776277663201e-13, -7.4521749026789087e-14, 5.1594146338641839e-14, -3.5602057875816143e-14, 2.4645709613732964e-14
	};
    const std::vector<double> bn = {
        6.0748522158071612e-18, -1.1873344996554025e-17, 1.1320760935913946e-17, -2.3746150755185981e-17, 1.1044671119814682e-17, -2.0983634880427138e-17, 3.5340305317588848e-17, -4.4174100956921145e-17, 2.4294825340891060e-17, -1.8771950543061651e-17, 1.8220903310499467e-16, -3.6440889916531417e-17, -1.1594761205065194e-16, -5.5207313270891860e-17, 1.5459350480967069e-16, -7.0666186020762352e-17, -7.0676431541281661e-17, -3.3123902648405255e-17, 1.7006040714922449e-16, -2.4292938008163821e-17, -4.1961068524750482e-17, -2.2970160423432768e-16, 4.6384437199481457e-17, -3.9759629707904303e-17, 1.5459411987792556e-17, 1.5462404758260039e-16, 1.4137726359853692e-16, -4.4192300236790968e-17, -6.6184040412525864e-18, -1.3918173954764845e-16, 1.1267100022194067e-16, -3.5363762167198841e-17, -3.9748170902060339e-17, 1.1264990253823972e-16, 9.7201949356291129e-17, -6.6315479656030154e-18, -5.9633243325752666e-17, -1.4356616513369502e-16, -2.2154590028199700e-18, -3.5331947129796778e-17, 8.6808638793912249e-17, 6.4264598216112473e-18, 4.5140684932229599e-17, -3.0198524384951705e-17, 1.8569996015379772e-17, -1.4750303442293332e-17, -3.2689427536498818e-17, -5.8204021856379313e-17, 1.1882714177525416e-16, -3.6305810817053168e-17, 5.8996734678753392e-18, -3.2319369680756056e-17, -3.7182993815447282e-17, -4.1155182698520185e-17, -3.2030732570891131e-18, -4.9877350839682590e-17, 6.3748993622726411e-17, 9.9345499007378787e-17, -2.0499668845370324e-17, -5.6595623514327838e-17, 1.6146947854318656e-16, -8.2927810024659149e-17, 3.0205572660850169e-16, 1.3223474072295832e-16, 4.8184938430797794e-17, -1.1882087641012753e-17, 1.4296664272537549e-17, 1.0597814749118034e-16, -1.2144882079303669e-16, 1.8683338240141943e-17, 1.4843576438716968e-16, -7.9352054029521939e-17, 1.1521845595147756e-16, 2.9406506031610348e-17, 3.1878202029398134e-17, -3.5108890313353543e-17, 2.7240861855127345e-17, -2.8384543002423385e-17, 2.3444872765278079e-16, -1.5017106339357052e-16, -9.0339613469499317e-17, 7.5080601655785718e-17, -1.0956472148615997e-17, 1.7503112512392159e-16, -1.2897362979467641e-16, 1.7626609196587362e-17, -2.0815783847704598e-17, 2.2777493399152766e-16, -2.1532848920073485e-16, -1.5319718560129154e-16, -1.3856979024703062e-16, -1.1379626332490740e-17, 6.5155227630357814e-17, -5.4790253731674746e-19, 7.6013671818131110e-17, 4.3459473748581767e-17, 1.0491413011772018e-17, -5.6900906316263386e-17, -4.3806753185098551e-17, 2.3539735447564581e-16, 5.3942687076536715e-17, 5.6139216284971515e-17, -1.5830156348466093e-16, 9.6823392474736243e-17, 2.8772708164259214e-16, -1.9516639618201837e-16, -2.0760785536522403e-17, 1.0279935881801540e-16, 7.4743777440788870e-17, -2.5873559908730990e-18, 3.7200335409991130e-16, -4.5260256921674757e-15, 3.2503650434394091e-16, -5.4574495825879445e-17, 2.8401026865199449e-16, 3.6033047384280401e-16, 2.5751282163611571e-16, -1.7271278176620955e-17, 4.4170300020901231e-16, 2.5895106413926021e-16, 1.5222409217644394e-17, 3.1814896572947722e-16, -1.9302020285217627e-15, 1.3332274357859279e-16, 1.5635410783123758e-16, 2.4557408013242324e-16, 7.8123367795329195e-17, -5.4126760828173569e-15, -1.4312572758201410e-17, -2.3369592890236205e-16, 2.3442070496576368e-17, -3.6987240560740105e-16, -3.7442562540099905e-16, 2.7841265411955072e-17, -1.9925516514888935e-16, 4.9010778038785283e-17, 1.9891804812802204e-17, 2.4488254679603155e-16, -4.5510128975998512e-17, -5.2998472185995078e-18, 1.7835758432818305e-16, 2.3947203147985174e-17, -1.7176570723051167e-16, -3.6958617066931170e-16, -3.0706410079198367e-16, 1.8720641109764189e-16, -1.3037800429248170e-16, -3.4318986243299345e-16, -6.3793288038748263e-16, -5.5621347375697273e-17
    };

    double gaussianNarrow_periodic(double x) {
        // Evaluate Fourier series
        return PeriodicFunctions::PeriodicSeries(x, a0, an, bn);
	}
}

namespace PeriodicFunctions::bimodal {
    const double a0 = 1.5957691062629392e-01;
    const std::vector<double> an = { -3.0650464552593487e-09, -1.7317100891853296e-01, -3.0372115972901532e-09, -7.1615693357362259e-02, -2.9828983428199540e-09, 1.4774552742577363e-01, -2.9046711953897060e-09, -7.1789475086402932e-02, -2.8060306559965609e-09, -2.7503222644971376e-09, -2.6910728169895891e-09, 1.4494041842830990e-02, -2.5641238028081491e-09, -6.0224359434162744e-03, -2.4294154732096473e-09, 5.8937665589190228e-04, -2.2908220433559505e-09, 2.8773132315834389e-04, -2.1516893463953816e-09, -1.0706626341016840e-04 };

    const std::vector<double> bn = { 1.0511989972143337e-10, 2.3834944183054343e-01, 3.1263600914839784e-10, -2.2041043076185798e-01, 5.1219384396767367e-10, 4.8005433455860468e-02, 6.9916169059363772e-10, 5.2158105423964263e-02, 8.6981803244252374e-10, -4.3192772262388143e-02, 1.0215322886452160e-09, 1.0530540801238919e-02, 1.1528171619772920e-09, 1.9568084564639773e-03, 1.2632544912050875e-09, -1.8139207847607411e-03, 1.3533384629560178e-09, 3.9603263938379297e-04, 1.4242679357387493e-09, 1.4530607711567880e-09 };

    double bimodal(double x) {
        // Evaluate Fourier series
        return PeriodicFunctions::PeriodicSeries(x, PeriodicFunctions::bimodal::a0, PeriodicFunctions::bimodal::an, PeriodicFunctions::bimodal::bn);
    }
}

/// <summary>
/// Represents a shifted Gaussian function as a Fourier series (at 0.75 pi).
/// </summary>
namespace PeriodicFunctions::shiftedGaussian {
	const double a0 = 1.5957691185333889e-01;
    const std::vector<double> an = {
    -0.208325,
    -0.000000,
    0.109848,
    -0.088737,
    0.030542,
    -0.000000,
    -0.004478,
    0.001907,
    -0.000346,
    -0.000000,
    0.000014,
    -0.000003,
    0.000000,
    -0.000000,
    -0.000000,
    0.000000,
    -0.000000,
    -0.000000,
    -0.000000,
    -0.000000
    };

    const std::vector<double> bn = {
        0.208325,
        -0.231753,
        0.109848,
        0.000000,
        -0.030542,
        0.017916,
        -0.004478,
        0.000000,
        0.000346,
        -0.000107,
        0.000014,
        0.000000,
        -0.000000,
        0.000000,
        -0.000000,
        0.000000,
        0.000000,
        0.000000,
        0.000000,
        0.000000
    };
    double shiftedGaussian(double x) {
        // Evaluate Fourier series
        return PeriodicFunctions::PeriodicSeries(x, a0, an, bn);
	}
}