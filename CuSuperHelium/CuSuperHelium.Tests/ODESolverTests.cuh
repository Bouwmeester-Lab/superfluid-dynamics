#pragma once
//#define DEBUG_RUNGE_KUTTA
#include <gtest/gtest.h>
#include <complex>
#include <array>
#include "Derivatives.cuh"
#include "WaterVelocities.cuh"
#include "matplotlibcpp.h"
#include "utilities.cuh"
#include "AutonomousProblem.h"
#include "AutonomousRungeKuttaStepper.cuh"

__global__ void flip_x_y(cuDoubleComplex* data, cuDoubleComplex* out, int size) 
{
	int idx = blockIdx.x * blockDim.x + threadIdx.x;
	if (idx < size) 
	{
		cuDoubleComplex temp = data[idx];
		out[idx].x = -temp.y;
		out[idx].y = temp.x;
	}
}

template <int N>
class OscillatoryProblem : public AutonomousProblem<cuDoubleComplex, N>
{
private:
	const int threads = 256;
	const int blocks = (N + threads - 1) / threads;
public:
	using AutonomousProblem<cuDoubleComplex, N>::AutonomousProblem;
	virtual void run(cuDoubleComplex* initialState) override
	{
		// Define the system of equations for the oscillatory problem
		flip_x_y << <blocks, threads >> > (initialState, this->devTimeEvolutionRhs, N); // implements: dx/dt=-y, dy/dt=x
	}
};

TEST(ODE_Solvers, RK4) 
{
	const int N = 256; // number of particles in the system
	// set the initial conditions
	cuDoubleComplex initialState[N];// = { {1.0, 0.0} };//, { 0.0, 1.0 }, { 1.0, 0.0 }, { 0.0, 1.0 }, { 1.0, 0.0 }, { 0.0, 1.0 }, { 1.0, 0.0 }, { 0.0, 1.0 },{1.0, 0.0}, {0.0, 1.0}, {1.0, 0.0}, {0.0, 1.0}, {1.0, 0.0}, {0.0, 1.0}, {1.0, 0.0}, {0.0, 1.0} };

	for(int i = 0; i < N; ++i) 
	{
		initialState[i].x = 2 * PI_d * i/N;
		initialState[i].y = sin(2 * PI_d * i * 0.01);
	}


	cuDoubleComplex* devInitialState;
	cudaMalloc(&devInitialState, N * sizeof(cuDoubleComplex));
	cudaMemcpy(devInitialState, initialState, N * sizeof(cuDoubleComplex), cudaMemcpyHostToDevice);


	// create a simple test problem
	OscillatoryProblem<N> problem;
	double dt = 0.001;
	int steps = 10000;

	AutonomousRungeKuttaStepper<cuDoubleComplex, N> stepper(problem, dt);
	stepper.initialize(devInitialState);
	for(int i = 0; i < steps; ++i) 
	{
		stepper.runStep();
	}
	cudaDeviceSynchronize();
	// Copy the results back to the host
	cuDoubleComplex* results = new cuDoubleComplex[N];
	cudaMemcpy(results, devInitialState, N * sizeof(cuDoubleComplex), cudaMemcpyDeviceToHost);

	// plot the results using matplotlibcpp
	matplotlibcpp::figure_size(800, 600);
	
	std::vector<double> x(N), y(N), x0(N), y0(N);

	for (int i = 0; i < N; ++i) 
	{
		x0[i] = initialState[i].x;
		y0[i] = initialState[i].y;

		x[i] = results[i].x;
		y[i] = results[i].y;
	}
	plt::plot(x0, y0, {{"label", "initial ys"}});
	//plt::plot(y0, { {"label", "initial y0"} });
	plt::plot(x, y, { {"label", "final y"} });
	//plt::plot(y, { {"label", "final y"} });
	
	plt::legend();

	// expected results (Calculated using scipy.solve_ivp with RK45 method)
	std::vector<double> expected_x = { 0.        ,  0.01356545,  0.0269961 ,  0.04015765,  0.05291689,
		0.0651422 ,  0.07670405,  0.08747553,  0.09733286,  0.10615587,
		0.11382845,  0.12023906,  0.12528111,  0.12885344,  0.13086068,
		0.13121362,  0.1298296 ,  0.1266328 ,  0.12155457,  0.11453368,
		0.10551655,  0.0944575 ,  0.0813189 ,  0.06607133,  0.04869368,
		0.02917327,  0.00750585, -0.01630433, -0.04224458, -0.07029381,
	   -0.10042259, -0.13259329, -0.16676022, -0.20286982, -0.24086085,
	   -0.28066465, -0.32220542, -0.36540048, -0.41016064, -0.45639053,
	   -0.50398896, -0.55284937, -0.60286021, -0.65390537, -0.70586467,
	   -0.75861435, -0.81202748, -0.86597455, -0.92032393, -0.9749424 ,
	   -1.02969568, -1.08444897, -1.13906744, -1.19341682, -1.24736389,
	   -1.30077702, -1.35352669, -1.405486  , -1.45653116, -1.506542  ,
	   -1.55540241, -1.60300084, -1.64923073, -1.69399088, -1.73718595,
	   -1.77872671, -1.81853052, -1.85652155, -1.89263115, -1.92679808,
	   -1.95896878, -1.98909756, -2.01714679, -2.04308704, -2.06689722,
	   -2.08856464, -2.10808505, -2.1254627 , -2.14071027, -2.15384887,
	   -2.16490792, -2.17392505, -2.18094594, -2.18602417, -2.18922097,
	   -2.19060499, -2.19025205, -2.18824481, -2.18467248, -2.17963042,
	   -2.17321982, -2.16554723, -2.15672423, -2.1468669 , -2.13609541,
	   -2.12453357, -2.11230826, -2.09954902, -2.08638747, -2.07295682,
	   -2.05939137, -2.04582591, -2.03239527, -2.01923372, -2.00647447,
	   -1.99424917, -1.98268732, -1.97191584, -1.96205851, -1.9532355 ,
	   -1.94556292, -1.93915231, -1.93411026, -1.93053792, -1.92853069,
	   -1.92817775, -1.92956177, -1.93275857, -1.9378368 , -1.94485769,
	   -1.95387482, -1.96493387, -1.97807247, -1.99332004, -2.01069769,
	   -2.0302181 , -2.05188551, -2.0756957 , -2.10163595, -2.12968518,
	   -2.15981396, -2.19198466, -2.22615159, -2.26226119, -2.30025222,
	   -2.34005602, -2.38159679, -2.42479185, -2.46955201, -2.5157819 ,
	   -2.56338033, -2.61224074, -2.66225157, -2.71329673, -2.76525604,
	   -2.81800572, -2.87141885, -2.92536592, -2.9797153 , -3.03433377,
	   -3.08908705, -3.14384033, -3.1984588 , -3.25280818, -3.30675526,
	   -3.36016839, -3.41291806, -3.46487737, -3.51592253, -3.56593336,
	   -3.61479378, -3.66239221, -3.70862209, -3.75338225, -3.79657731,
	   -3.83811808, -3.87792189, -3.91591292, -3.95202252, -3.98618945,
	   -4.01836015, -4.04848893, -4.07653816, -4.10247841, -4.12628859,
	   -4.14795601, -4.16747642, -4.18485406, -4.20010164, -4.21324024,
	   -4.22429929, -4.23331641, -4.24033731, -4.24541554, -4.24861233,
	   -4.24999636, -4.24964342, -4.24763618, -4.24406385, -4.23902179,
	   -4.23261119, -4.2249386 , -4.2161156 , -4.20625826, -4.19548678,
	   -4.18392494, -4.17169963, -4.15894039, -4.14577883, -4.13234819,
	   -4.11878274, -4.10521728, -4.09178664, -4.07862509, -4.06586584,
	   -4.05364054, -4.04207869, -4.03130721, -4.02144988, -4.01262687,
	   -4.00495429, -3.99854368, -3.99350162, -3.98992929, -3.98792206,
	   -3.98756912, -3.98895314, -3.99214994, -3.99722816, -4.00424906,
	   -4.01326619, -4.02432524, -4.03746384, -4.05271141, -4.07008906,
	   -4.08960947, -4.11127688, -4.13508706, -4.16102732, -4.18907655,
	   -4.21920532, -4.25137602, -4.28554296, -4.32165255, -4.35964359,
	   -4.39944739, -4.44098816, -4.48418322, -4.52894338, -4.57517326,
	   -4.6227717 , -4.67163211, -4.72164294, -4.7726881 , -4.82464741,
	   -4.87739708, -4.93081022, -4.98475729, -5.03910667, -5.09372514,
	   -5.14847842, -5.2032317 , -5.25785017, -5.31219955, -5.36614662,
	   -5.4195597 };
	std::vector<double> expected_y = { 0.        , -0.06603802, -0.13186812, -0.19728319, -0.26207775,
	   -0.3260488 , -0.38899655, -0.45072529, -0.51104409, -0.56976759,
	   -0.62671674, -0.68171948, -0.73461143, -0.78523655, -0.83344774,
	   -0.87910743, -0.92208811, -0.96227286, -0.99955578, -1.03384243,
	   -1.06505018, -1.09310858, -1.11795958, -1.1395578 , -1.1578707 ,
	   -1.1728787 , -1.18457527, -1.19296695, -1.1980733 , -1.19992687,
	   -1.19857305, -1.19406987, -1.1864878 , -1.17590945, -1.16242928,
	   -1.14615317, -1.12719805, -1.10569144, -1.08177089, -1.05558351,
	   -1.02728535, -0.99704077, -0.96502184, -0.93140762, -0.89638346,
	   -0.86014027, -0.8228738 , -0.78478381, -0.74607332, -0.7069478 ,
	   -0.66761435, -0.6282809 , -0.58915537, -0.55044488, -0.51235489,
	   -0.47508842, -0.43884524, -0.40382107, -0.37020685, -0.33818792,
	   -0.30794334, -0.27964518, -0.2534578 , -0.22953725, -0.20803064,
	   -0.18907552, -0.17279941, -0.15931924, -0.14874089, -0.14115882,
	   -0.13665564, -0.13530182, -0.13715539, -0.14226175, -0.15065342,
	   -0.16234999, -0.17735799, -0.19567089, -0.21726911, -0.24212011,
	   -0.27017851, -0.30138626, -0.33567291, -0.37295583, -0.41314058,
	   -0.45612126, -0.50178095, -0.54999214, -0.60061726, -0.65350921,
	   -0.70851195, -0.7654611 , -0.8241846 , -0.8845034 , -0.94623214,
	   -1.0091799 , -1.07315094, -1.1379455 , -1.20336057, -1.26919067,
	   -1.33522869, -1.40126672, -1.46709681, -1.53251188, -1.59730644,
	   -1.66127749, -1.72422524, -1.78595398, -1.84627278, -1.90499628,
	   -1.96194543, -2.01694817, -2.06984012, -2.12046524, -2.16867643,
	   -2.21433612, -2.25731681, -2.29750156, -2.33478447, -2.36907112,
	   -2.40027888, -2.42833727, -2.45318827, -2.47478649, -2.49309939,
	   -2.50810739, -2.51980396, -2.52819564, -2.53330199, -2.53515557,
	   -2.53380174, -2.52929856, -2.52171649, -2.51113815, -2.49765797,
	   -2.48138186, -2.46242675, -2.44092013, -2.41699958, -2.3908122 ,
	   -2.36251404, -2.33226946, -2.30025053, -2.26663631, -2.23161215,
	   -2.19536896, -2.15810249, -2.1200125 , -2.08130201, -2.04217649,
	   -2.00284304, -1.96350959, -1.92438406, -1.88567357, -1.84758358,
	   -1.81031711, -1.77407393, -1.73904976, -1.70543554, -1.67341661,
	   -1.64317204, -1.61487387, -1.58868649, -1.56476595, -1.54325933,
	   -1.52430421, -1.5080281 , -1.49454793, -1.48396958, -1.47638751,
	   -1.47188433, -1.47053051, -1.47238408, -1.47749044, -1.48588211,
	   -1.49757868, -1.51258668, -1.53089958, -1.55249781, -1.5773488 ,
	   -1.6054072 , -1.63661495, -1.6709016 , -1.70818452, -1.74836927,
	   -1.79134995, -1.83700964, -1.88522083, -1.93584595, -1.98873791,
	   -2.04374064, -2.10068979, -2.1594133 , -2.21973209, -2.28146083,
	   -2.34440859, -2.40837963, -2.4731742 , -2.53858926, -2.60441936,
	   -2.67045738, -2.73649541, -2.80232551, -2.86774057, -2.93253513,
	   -2.99650618, -3.05945394, -3.12118267, -3.18150147, -3.24022497,
	   -3.29717412, -3.35217686, -3.40506881, -3.45569393, -3.50390513,
	   -3.54956481, -3.5925455 , -3.63273025, -3.67001317, -3.70429981,
	   -3.73550757, -3.76356596, -3.78841696, -3.81001518, -3.82832808,
	   -3.84333609, -3.85503266, -3.86342433, -3.86853068, -3.87038426,
	   -3.86903044, -3.86452726, -3.85694518, -3.84636684, -3.83288666,
	   -3.81661055, -3.79765544, -3.77614882, -3.75222827, -3.72604089,
	   -3.69774273, -3.66749816, -3.63547923, -3.601865  , -3.56684084,
	   -3.53059766, -3.49333119, -3.45524119, -3.4165307 , -3.37740518,
	   -3.33807173, -3.29873828, -3.25961276, -3.22090226, -3.18281227,
	   -3.1455458 };

	for(int i = 0; i < N; ++i) 
	{
		EXPECT_NEAR(results[i].x, expected_x[i], 1e-2) << "Mismatch at index " << i;
		EXPECT_NEAR(results[i].y, expected_y[i], 1e-2) << "Mismatch at index " << i;
	}

	// clean up
	delete[] results;
}
